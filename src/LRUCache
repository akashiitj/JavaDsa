import java.util.LinkedHashMap;
import java.util.Map;

public class LRUCache<K,V> extends LinkedHashMap<K,V> {
    int capacity;
    public LRUCache(int capacity) {
        this.capacity = capacity;
    }

    @Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size()>capacity;
    }

    @Override
    public V get(Object key) {
        V val =  super.get(key);
        if(val!=null){
            put((K)key,val);
        }
        return val;
    }

    @Override
    public V put(K key, V value) {
        remove(key);
        return super.put(key, value);
    }

    public static void main(String[] args){
        LRUCache<Integer,Integer> cache = new LRUCache<>(2);
        System.out.println("1 : " + cache.toString());
        cache.put(2,20);
        System.out.println("2 : " + cache.toString());
        cache.put(3,20);
        System.out.println("3 : " + cache.toString());
        cache.put(4,20);
        System.out.println("4 : " + cache.toString());
    }
}
